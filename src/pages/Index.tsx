import { useState, useEffect } from 'react';
import { Moon, Sun, Search, Star, Users, HelpCircle, FileText } from 'lucide-react';
import WorkerProfile from './WorkerProfile';
import OrganizationProfile from './OrganizationProfile';
import ContractSignature, { SignatureData } from '@/components/ContractSignature';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import Icon from '@/components/ui/icon';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';

const Index = () => {
  const [isDark, setIsDark] = useState(false);
  const [activeTab, setActiveTab] = useState('home');
  const [userType, setUserType] = useState<'worker' | 'organization' | null>(null);
  const [isRegistered, setIsRegistered] = useState(false);
  const [profileData, setProfileData] = useState<any>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [sortBy, setSortBy] = useState<'rating' | 'price-asc' | 'price-desc' | null>(null);
  const [searchHistory, setSearchHistory] = useState<string[]>([]);
  const [showContractDialog, setShowContractDialog] = useState(false);
  const [selectedExecutor, setSelectedExecutor] = useState<any>(null);
  const [orders, setOrders] = useState<any[]>([]);

  useEffect(() => {
    if (isDark) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDark]);

  useEffect(() => {
    const savedHistory = localStorage.getItem('searchHistory');
    if (savedHistory) {
      setSearchHistory(JSON.parse(savedHistory));
    }
  }, []);

  const workers = [
    {
      id: 1,
      name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
      specialty: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫, —ç–ª–µ–∫—Ç—Ä–∏–∫',
      rating: 4.8,
      reviews: 127,
      price: '2500‚ÇΩ/—á–∞—Å',
      image: 'üë®‚Äçüîß',
      type: 'worker',
      category: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞'
    },
    {
      id: 2,
      name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
      specialty: '–£–±–æ—Ä–∫–∞, –ø–æ–º–æ—â—å –ø–æ —Ö–æ–∑—è–π—Å—Ç–≤—É',
      rating: 4.9,
      reviews: 215,
      price: '1800‚ÇΩ/—á–∞—Å',
      image: 'üë©‚Äçüíº',
      type: 'worker',
      category: '–£–±–æ—Ä–∫–∞'
    },
    {
      id: 3,
      name: '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤',
      specialty: '–ì—Ä—É–∑—á–∏–∫, –ø–µ—Ä–µ–µ–∑–¥—ã',
      rating: 4.7,
      reviews: 89,
      price: '2000‚ÇΩ/—á–∞—Å',
      image: 'üí™',
      type: 'worker',
      category: '–ü–µ—Ä–µ–µ–∑–¥—ã'
    },
    {
      id: 4,
      name: '–ò–≤–∞–Ω –°—Ç—Ä–æ–∏—Ç–µ–ª—å',
      specialty: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Ä–µ–º–æ–Ω—Ç',
      rating: 4.9,
      reviews: 156,
      price: '3000‚ÇΩ/—á–∞—Å',
      image: 'üë∑',
      type: 'worker',
      category: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ'
    }
  ];

  const organizations = [
    {
      id: 1,
      name: '–ú–∞—Å—Ç–µ—Ä –Ω–∞ —á–∞—Å',
      type: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
      workers: 45,
      rating: 4.8,
      price: '–æ—Ç 2000‚ÇΩ/—á–∞—Å',
      executorType: 'organization',
      category: '–†–µ–º–æ–Ω—Ç'
    },
    {
      id: 2,
      name: '–ß–∏—Å—Ç—ã–π –¥–æ–º',
      type: '–ö–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏',
      workers: 32,
      rating: 4.9,
      price: '–æ—Ç 1500‚ÇΩ/—á–∞—Å',
      executorType: 'organization',
      category: '–£–±–æ—Ä–∫–∞'
    },
    {
      id: 3,
      name: '–°—Ç—Ä–æ–π–ü—Ä–æ',
      type: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
      workers: 58,
      rating: 4.7,
      price: '–æ—Ç 3500‚ÇΩ/—á–∞—Å',
      executorType: 'organization',
      category: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ'
    }
  ];

  const categories = [
    { name: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞', icon: 'üîß' },
    { name: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', icon: '‚ö°' },
    { name: '–£–±–æ—Ä–∫–∞', icon: 'üßπ' },
    { name: '–ü–µ—Ä–µ–µ–∑–¥—ã', icon: 'üì¶' },
    { name: '–†–µ–º–æ–Ω—Ç', icon: 'üî®' },
    { name: '–°–∞–¥–æ–≤–Ω–∏–∫', icon: 'üå±' },
    { name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', icon: 'üèóÔ∏è' }
  ];

  const faqItems = [
    {
      question: '–ö–∞–∫ –Ω–∞–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞?',
      answer: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –Ω–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å—Å—è" –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –¥–µ—Ç–∞–ª—è—Ö —Ä–∞–±–æ—Ç—ã.'
    },
    {
      question: '–ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è?',
      answer: '–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.'
    },
    {
      question: '–ö–∞–∫ —Å—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º?',
      answer: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.'
    },
    {
      question: '–ö–∞–∫–æ–≤–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥?',
      answer: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç –∏ –æ–ø—ã—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –í —Å—Ä–µ–¥–Ω–µ–º –æ—Ç 1500‚ÇΩ –¥–æ 3000‚ÇΩ –≤ —á–∞—Å.'
    }
  ];

  const allExecutors = [
    ...workers.map(w => ({ ...w, executorType: 'worker' as const })),
    ...organizations
  ];

  const handleSearch = () => {
    if (searchQuery.trim() && !searchHistory.includes(searchQuery.trim())) {
      const newHistory = [searchQuery.trim(), ...searchHistory].slice(0, 5);
      setSearchHistory(newHistory);
      localStorage.setItem('searchHistory', JSON.stringify(newHistory));
    }
    setShowSearchResults(true);
    setActiveTab('search');
  };

  const handleCategoryClick = (categoryName: string) => {
    setSelectedCategory(categoryName);
    setShowSearchResults(true);
    setActiveTab('search');
  };

  const handleContactClick = (executor: any) => {
    setSelectedExecutor(executor);
    setShowContractDialog(true);
  };

  const handleContractSign = (signatureData: SignatureData) => {
    const newOrder = {
      id: Date.now(),
      executor: selectedExecutor,
      contract: signatureData,
      status: 'active',
      createdAt: new Date().toISOString()
    };
    setOrders([...orders, newOrder]);
    setShowContractDialog(false);
    setActiveTab('orders');
  };

  const parsePrice = (priceStr: string) => {
    const match = priceStr.match(/(\d+)/);
    return match ? parseInt(match[1]) : 0;
  };

  const sortExecutors = (executors: any[]) => {
    if (!sortBy) return executors;
    
    return [...executors].sort((a, b) => {
      if (sortBy === 'rating') {
        return b.rating - a.rating;
      } else if (sortBy === 'price-asc') {
        return parsePrice(a.price) - parsePrice(b.price);
      } else if (sortBy === 'price-desc') {
        return parsePrice(b.price) - parsePrice(a.price);
      }
      return 0;
    });
  };

  const filteredExecutors = sortExecutors(allExecutors.filter(executor => {
    const matchesSearch = searchQuery === '' || 
      executor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (executor.type ? executor.type.toLowerCase().includes(searchQuery.toLowerCase()) : false) ||
      (executor.specialty ? executor.specialty.toLowerCase().includes(searchQuery.toLowerCase()) : false);
    
    const matchesCategory = !selectedCategory || executor.category === selectedCategory;
    
    return matchesSearch && matchesCategory;
  }));

  return (
    <div className="min-h-screen bg-background transition-colors duration-300">
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container mx-auto px-4">
          <div className="flex h-16 items-center justify-between">
            <div className="flex items-center gap-2">
              <Icon name="Wrench" size={28} className="text-primary" />
              <h1 className="text-2xl font-bold">–•–µ–ª–ø–µ—Ä—Å</h1>
            </div>
            
            <nav className="hidden md:flex items-center gap-6">
              <button onClick={() => setActiveTab('home')} className={`text-sm font-medium transition-colors hover:text-primary ${activeTab === 'home' ? 'text-primary' : 'text-muted-foreground'}`}>
                –ì–ª–∞–≤–Ω–∞—è
              </button>
              <button onClick={() => setActiveTab('workers')} className={`text-sm font-medium transition-colors hover:text-primary ${activeTab === 'workers' ? 'text-primary' : 'text-muted-foreground'}`}>
                –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—á–∏—Ö
              </button>
              <button onClick={() => setActiveTab('organizations')} className={`text-sm font-medium transition-colors hover:text-primary ${activeTab === 'organizations' ? 'text-primary' : 'text-muted-foreground'}`}>
                –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
              </button>
              <button onClick={() => setActiveTab('orders')} className={`text-sm font-medium transition-colors hover:text-primary ${activeTab === 'orders' ? 'text-primary' : 'text-muted-foreground'}`}>
                –ú–æ–∏ –∑–∞—è–≤–∫–∏
              </button>
              <button onClick={() => setActiveTab('register')} className={`text-sm font-medium transition-colors hover:text-primary ${activeTab === 'register' ? 'text-primary' : 'text-muted-foreground'}`}>
                –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
              </button>
              <button onClick={() => setActiveTab('faq')} className={`text-sm font-medium transition-colors hover:text-primary ${activeTab === 'faq' ? 'text-primary' : 'text-muted-foreground'}`}>
                FAQ
              </button>
            </nav>

            <div className="flex items-center gap-2">
              {isRegistered && (
                <Button
                  variant="outline"
                  onClick={() => setActiveTab('profile')}
                >
                  <Icon name="User" className="mr-2 h-4 w-4" />
                  –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
                </Button>
              )}
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsDark(!isDark)}
                className="rounded-full"
              >
                {isDark ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
              </Button>
            </div>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8">
        {activeTab === 'home' && (
          <div className="space-y-12">
            <section className="text-center space-y-6 py-12">
              <h2 className="text-4xl md:text-5xl font-bold">
                –ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
                <br />
                <span className="text-primary">–∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã</span>
              </h2>
              <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                –¢—ã—Å—è—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±–æ–π –∑–∞–¥–∞—á–µ–π
              </p>
              
              <div className="flex gap-2 max-w-2xl mx-auto mt-8">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5" />
                  <Input
                    placeholder="–ü–æ–∏—Å–∫ —É—Å–ª—É–≥: —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫, —É–±–æ—Ä–∫–∞, –≥—Ä—É–∑—á–∏–∫..."
                    className="pl-10 h-12"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        handleSearch();
                      }
                    }}
                  />
                </div>
                <Button size="lg" className="h-12 px-8" onClick={handleSearch}>
                  –ù–∞–π—Ç–∏
                </Button>
              </div>
            </section>

            <section>
              <h3 className="text-2xl font-semibold mb-6">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
              <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4 max-w-5xl mx-auto">
                {categories.map((category, index) => (
                  <Card 
                    key={index} 
                    className="cursor-pointer hover:shadow-lg transition-all hover:scale-105"
                    onClick={() => handleCategoryClick(category.name)}
                  >
                    <CardContent className="flex flex-col items-center justify-center p-6 space-y-2">
                      <span className="text-4xl">{category.icon}</span>
                      <p className="text-sm font-medium text-center">{category.name}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </section>

            <section>
              <h3 className="text-2xl font-semibold mb-6">–¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</h3>
              <div className="grid md:grid-cols-3 gap-6">
                {workers.slice(0, 3).map((worker) => (
                  <Card key={worker.id} className="hover:shadow-lg transition-shadow">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div className="flex items-center gap-3">
                          <div className="text-5xl">{worker.image}</div>
                          <div>
                            <CardTitle className="text-lg">{worker.name}</CardTitle>
                            <CardDescription>{worker.specialty}</CardDescription>
                          </div>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex items-center gap-2">
                        <div className="flex items-center gap-1">
                          <Star className="h-4 w-4 fill-primary text-primary" />
                          <span className="font-semibold">{worker.rating}</span>
                        </div>
                        <span className="text-sm text-muted-foreground">({worker.reviews} –æ—Ç–∑—ã–≤–æ–≤)</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-lg font-bold text-primary">{worker.price}</span>
                        <Button onClick={() => handleContactClick(worker)}>–°–≤—è–∑–∞—Ç—å—Å—è</Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </section>
          </div>
        )}

        {activeTab === 'search' && (
          <div className="space-y-6">
            <div className="flex items-start justify-between mb-4">
              <div>
                <h2 className="text-3xl font-bold">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>
                {selectedCategory && (
                  <p className="text-muted-foreground mt-2">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selectedCategory}
                    <Button 
                      variant="link" 
                      size="sm" 
                      onClick={() => setSelectedCategory(null)}
                      className="ml-2"
                    >
                      –°–±—Ä–æ—Å–∏—Ç—å
                    </Button>
                  </p>
                )}
              </div>
              <div className="flex items-center gap-2">
                <p className="text-sm text-muted-foreground mr-2">–ù–∞–π–¥–µ–Ω–æ: {filteredExecutors.length}</p>
                <div className="flex gap-2">
                  <Button 
                    variant={sortBy === 'rating' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'rating' ? null : 'rating')}
                  >
                    –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                  </Button>
                  <Button 
                    variant={sortBy === 'price-asc' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'price-asc' ? null : 'price-asc')}
                  >
                    –¶–µ–Ω–∞ ‚Üë
                  </Button>
                  <Button 
                    variant={sortBy === 'price-desc' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'price-desc' ? null : 'price-desc')}
                  >
                    –¶–µ–Ω–∞ ‚Üì
                  </Button>
                </div>
              </div>
            </div>
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredExecutors.map((executor) => (
                <Card key={`${executor.executorType}-${executor.id}`} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        {executor.executorType === 'worker' ? (
                          <div className="text-5xl">{executor.image}</div>
                        ) : (
                          <div className="p-4 bg-primary/10 rounded-lg">
                            <Icon name="Building2" size={32} className="text-primary" />
                          </div>
                        )}
                        <div className="flex-1">
                          <CardTitle className="text-lg">{executor.name}</CardTitle>
                          <CardDescription>
                            {executor.executorType === 'worker' ? executor.specialty : executor.type}
                          </CardDescription>
                        </div>
                      </div>
                      <Badge variant="outline">{executor.executorType === 'worker' ? '–†–∞–±–æ—á–∏–π' : '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'}</Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex items-center gap-2">
                      <div className="flex items-center gap-1">
                        <Star className="h-4 w-4 fill-primary text-primary" />
                        <span className="font-semibold">{executor.rating}</span>
                      </div>
                      <span className="text-sm text-muted-foreground">
                        ({executor.executorType === 'worker' ? `${executor.reviews} –æ—Ç–∑—ã–≤–æ–≤` : `${executor.workers} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`})
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-lg font-bold text-primary">{executor.price}</span>
                      <Button onClick={() => handleContactClick(executor)}>–°–≤—è–∑–∞—Ç—å—Å—è</Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'workers' && (
          <div className="space-y-6">
            <div className="flex flex-col gap-4 mb-6">
              <div className="flex items-center justify-between">
                <h2 className="text-3xl font-bold">–ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—á–∏—Ö</h2>
                <div className="flex gap-2">
                  <Button 
                    variant={sortBy === 'rating' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'rating' ? null : 'rating')}
                  >
                    –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                  </Button>
                  <Button 
                    variant={sortBy === 'price-asc' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'price-asc' ? null : 'price-asc')}
                  >
                    –¶–µ–Ω–∞ ‚Üë
                  </Button>
                  <Button 
                    variant={sortBy === 'price-desc' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'price-desc' ? null : 'price-desc')}
                  >
                    –¶–µ–Ω–∞ ‚Üì
                  </Button>
                </div>
              </div>
              <div className="flex flex-wrap gap-2">
                <Button 
                  variant={selectedCategory === null ? 'default' : 'outline'} 
                  size="sm"
                  onClick={() => setSelectedCategory(null)}
                >
                  –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </Button>
                {categories.map((cat) => (
                  <Button 
                    key={cat.name}
                    variant={selectedCategory === cat.name ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSelectedCategory(cat.name)}
                  >
                    {cat.icon} {cat.name}
                  </Button>
                ))}
              </div>
            </div>
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {sortExecutors(workers.filter(w => !selectedCategory || w.category === selectedCategory)).map((worker) => (
                <Card key={worker.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start gap-3">
                      <div className="text-5xl">{worker.image}</div>
                      <div className="flex-1">
                        <CardTitle className="text-lg">{worker.name}</CardTitle>
                        <CardDescription>{worker.specialty}</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex items-center gap-2">
                      <div className="flex items-center gap-1">
                        <Star className="h-4 w-4 fill-primary text-primary" />
                        <span className="font-semibold">{worker.rating}</span>
                      </div>
                      <span className="text-sm text-muted-foreground">({worker.reviews} –æ—Ç–∑—ã–≤–æ–≤)</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-lg font-bold text-primary">{worker.price}</span>
                      <Button onClick={() => handleContactClick(worker)}>–°–≤—è–∑–∞—Ç—å—Å—è</Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'organizations' && (
          <div className="space-y-6">
            <div className="flex flex-col gap-4 mb-6">
              <div className="flex items-center justify-between">
                <h2 className="text-3xl font-bold">–ö–∞—Ç–∞–ª–æ–≥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π</h2>
                <div className="flex gap-2">
                  <Button 
                    variant={sortBy === 'rating' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'rating' ? null : 'rating')}
                  >
                    –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                  </Button>
                  <Button 
                    variant={sortBy === 'price-asc' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'price-asc' ? null : 'price-asc')}
                  >
                    –¶–µ–Ω–∞ ‚Üë
                  </Button>
                  <Button 
                    variant={sortBy === 'price-desc' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSortBy(sortBy === 'price-desc' ? null : 'price-desc')}
                  >
                    –¶–µ–Ω–∞ ‚Üì
                  </Button>
                </div>
              </div>
              <div className="flex flex-wrap gap-2">
                <Button 
                  variant={selectedCategory === null ? 'default' : 'outline'} 
                  size="sm"
                  onClick={() => setSelectedCategory(null)}
                >
                  –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </Button>
                {categories.map((cat) => (
                  <Button 
                    key={cat.name}
                    variant={selectedCategory === cat.name ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSelectedCategory(cat.name)}
                  >
                    {cat.icon} {cat.name}
                  </Button>
                ))}
              </div>
            </div>
            
            <div className="grid md:grid-cols-2 gap-6">
              {sortExecutors(organizations.filter(o => !selectedCategory || o.category === selectedCategory)).map((org) => (
                <Card key={org.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="text-xl">{org.name}</CardTitle>
                        <CardDescription>{org.type}</CardDescription>
                      </div>
                      <Badge variant="secondary">
                        <Users className="h-3 w-3 mr-1" />
                        {org.workers} —á–µ–ª
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex items-center gap-2">
                      <div className="flex items-center gap-1">
                        <Star className="h-4 w-4 fill-primary text-primary" />
                        <span className="font-semibold">{org.rating}</span>
                      </div>
                      <span className="text-sm text-muted-foreground">–†–µ–π—Ç–∏–Ω–≥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-lg font-bold text-primary">{org.price}</span>
                      <Button onClick={() => handleContactClick(org)}>–°–≤—è–∑–∞—Ç—å—Å—è</Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'register' && (
          <div className="max-w-2xl mx-auto space-y-6">
            <div className="text-center space-y-2">
              <h2 className="text-3xl font-bold">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</h2>
              <p className="text-muted-foreground">–ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö —É–∂–µ —Å–µ–≥–æ–¥–Ω—è</p>
            </div>
            
            <Card>
              <CardHeader>
                <CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</CardTitle>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="individual" className="w-full">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="individual">
                      <Icon name="User" className="mr-2 h-4 w-4" />
                      –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π
                    </TabsTrigger>
                    <TabsTrigger value="organization">
                      <Icon name="Building2" className="mr-2 h-4 w-4" />
                      –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                    </TabsTrigger>
                  </TabsList>
                  <TabsContent value="individual" className="space-y-4 mt-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–í–∞—à–µ –∏–º—è</label>
                      <Input 
                        placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" 
                        onChange={(e) => setProfileData({...profileData, name: e.target.value})}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</label>
                      <Input 
                        placeholder="–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫, —ç–ª–µ–∫—Ç—Ä–∏–∫" 
                        onChange={(e) => setProfileData({...profileData, specialty: e.target.value})}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                      <Input 
                        placeholder="+7 (900) 123-45-67" 
                        onChange={(e) => setProfileData({...profileData, phone: e.target.value})}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ (—Ä—É–±/—á–∞—Å)</label>
                      <Input 
                        type="number" 
                        placeholder="2000" 
                        onChange={(e) => setProfileData({...profileData, price: e.target.value + '‚ÇΩ/—á–∞—Å'})}
                      />
                    </div>
                    <Button 
                      className="w-full" 
                      size="lg"
                      onClick={() => {
                        setUserType('worker');
                        setIsRegistered(true);
                        setActiveTab('profile');
                      }}
                    >
                      –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                    </Button>
                  </TabsContent>
                  <TabsContent value="organization" className="space-y-4 mt-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</label>
                      <Input 
                        placeholder="–û–û–û –ú–∞—Å—Ç–µ—Ä" 
                        onChange={(e) => setProfileData({...profileData, name: e.target.value})}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–¢–∏–ø —É—Å–ª—É–≥</label>
                      <Input 
                        placeholder="–ö–ª–∏–Ω–∏–Ω–≥, —Ä–µ–º–æ–Ω—Ç" 
                        onChange={(e) => setProfileData({...profileData, type: e.target.value})}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</label>
                      <Input 
                        type="number" 
                        placeholder="10" 
                        onChange={(e) => setProfileData({...profileData, workers: parseInt(e.target.value)})}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</label>
                      <Input 
                        placeholder="+7 (900) 123-45-67" 
                        onChange={(e) => setProfileData({...profileData, phone: e.target.value})}
                      />
                    </div>
                    <Button 
                      className="w-full" 
                      size="lg"
                      onClick={() => {
                        setUserType('organization');
                        setIsRegistered(true);
                        setActiveTab('profile');
                      }}
                    >
                      –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                    </Button>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'orders' && (
          <div className="max-w-4xl mx-auto space-y-6">
            <h2 className="text-3xl font-bold">–ú–æ–∏ –∑–∞—è–≤–∫–∏</h2>
            
            {orders.length === 0 ? (
              <Card>
                <CardContent className="text-center py-12">
                  <FileText className="h-12 w-12 mx-auto mb-4 opacity-50 text-muted-foreground" />
                  <p className="text-muted-foreground">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫</p>
                  <Button className="mt-4" onClick={() => setActiveTab('home')}>
                    –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                  </Button>
                </CardContent>
              </Card>
            ) : (
              <div className="space-y-4">
                {orders.map((order) => (
                  <Card key={order.id}>
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div>
                          <CardTitle>
                            {order.executor.executorType === 'worker' 
                              ? order.executor.specialty 
                              : order.executor.type}
                          </CardTitle>
                          <CardDescription>
                            {order.executor.name} ‚Ä¢ {new Date(order.createdAt).toLocaleDateString('ru-RU')}
                          </CardDescription>
                        </div>
                        <Badge variant={order.status === 'active' ? 'default' : 'secondary'}>
                          {order.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-semibold">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                          <span className="font-bold text-primary">{order.executor.price}</span>
                        </div>
                        
                        <div className="border-t pt-4 mt-4">
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="w-full"
                            onClick={() => {
                              const contractText = order.executor.executorType === 'worker'
                                ? `–î–û–ì–û–í–û–† –í–û–ó–ú–ï–ó–î–ù–û–ì–û –û–ö–ê–ó–ê–ù–ò–Ø –£–°–õ–£–ì\n\n–≥. –ú–æ—Å–∫–≤–∞    ${order.contract.signatureDate}\n\n–ó–ê–ö–ê–ó–ß–ò–ö: ${order.contract.clientFullName}\n–ü–∞—Å–ø–æ—Ä—Ç: ${order.contract.clientPassport}\n–ê–¥—Ä–µ—Å: ${order.contract.clientAddress}\n\n–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: ${order.contract.executorFullName}\n–ü–∞—Å–ø–æ—Ä—Ç: ${order.contract.executorPassport}\n–ê–¥—Ä–µ—Å: ${order.contract.executorAddress}\n\n–£—Å–ª—É–≥–∞: ${order.executor.specialty}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.executor.price}\n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –ó–∞–∫–∞–∑—á–∏–∫–∞:\n–¢–µ–ª–µ—Ñ–æ–Ω: ${order.contract.clientPhone}\nEmail: ${order.contract.clientEmail}\n\n–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é ${order.contract.signatureDate}`
                                : `–î–û–ì–û–í–û–† –ù–ê –û–ö–ê–ó–ê–ù–ò–ï –£–°–õ–£–ì\n\n–≥. –ú–æ—Å–∫–≤–∞    ${order.contract.signatureDate}\n\n–ó–ê–ö–ê–ó–ß–ò–ö: ${order.contract.clientFullName}\n–ü–∞—Å–ø–æ—Ä—Ç: ${order.contract.clientPassport}\n–ê–¥—Ä–µ—Å: ${order.contract.clientAddress}\n\n–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: ${order.contract.executorFullName}\n–ò–ù–ù: ${order.contract.executorINN}\n–ê–¥—Ä–µ—Å: ${order.contract.executorAddress}\n\n–£—Å–ª—É–≥–∞: ${order.executor.type}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.executor.price}\n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –ó–∞–∫–∞–∑—á–∏–∫–∞:\n–¢–µ–ª–µ—Ñ–æ–Ω: ${order.contract.clientPhone}\nEmail: ${order.contract.clientEmail}\n\n–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é ${order.contract.signatureDate}`;
                              
                              alert(contractText);
                            }}
                          >
                            <Icon name="FileText" className="mr-2 h-4 w-4" />
                            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–≥–æ–≤–æ—Ä
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </div>
        )}

        {activeTab === 'faq' && (
          <div className="max-w-3xl mx-auto space-y-6">
            <div className="text-center space-y-2">
              <HelpCircle className="h-12 w-12 mx-auto text-primary" />
              <h2 className="text-3xl font-bold">–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã</h2>
              <p className="text-muted-foreground">–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</p>
            </div>
            
            <Accordion type="single" collapsible className="w-full">
              {faqItems.map((item, index) => (
                <AccordionItem key={index} value={`item-${index}`}>
                  <AccordionTrigger className="text-left">{item.question}</AccordionTrigger>
                  <AccordionContent>{item.answer}</AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>

            <Card className="bg-primary/5 border-primary/20">
              <CardContent className="pt-6">
                <div className="flex items-start gap-4">
                  <Icon name="MessageCircle" className="h-6 w-6 text-primary mt-1" />
                  <div>
                    <h3 className="font-semibold mb-2">–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç?</h3>
                    <p className="text-sm text-muted-foreground mb-4">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
                    <Button>–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'profile' && isRegistered && (
          <>
            {userType === 'worker' ? (
              <WorkerProfile 
                profileData={profileData} 
                onBack={() => setActiveTab('home')}
                onUpdateProfile={(data) => setProfileData(data)}
              />
            ) : (
              <OrganizationProfile 
                profileData={profileData} 
                onBack={() => setActiveTab('home')}
                onUpdateProfile={(data) => setProfileData(data)}
              />
            )}
          </>
        )}
      </main>

      <Dialog open={showContractDialog} onOpenChange={setShowContractDialog}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</DialogTitle>
            <DialogDescription>
              –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
            </DialogDescription>
          </DialogHeader>
          {selectedExecutor && (
            <ContractSignature
              contractType={selectedExecutor.executorType === 'worker' ? 'worker' : 'organization'}
              executorName={selectedExecutor.name}
              serviceName={selectedExecutor.executorType === 'worker' ? selectedExecutor.specialty : selectedExecutor.type}
              price={selectedExecutor.price}
              onSign={handleContractSign}
              onCancel={() => setShowContractDialog(false)}
            />
          )}
        </DialogContent>
      </Dialog>

      <footer className="border-t mt-16">
        <div className="container mx-auto px-4 py-8">
          <div className="flex flex-col md:flex-row items-center justify-between gap-4">
            <div className="flex items-center gap-2">
              <Icon name="Wrench" size={24} className="text-primary" />
              <span className="font-semibold">–•–µ–ª–ø–µ—Ä—Å</span>
            </div>
            <p className="text-sm text-muted-foreground">¬© 2024 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã</p>
            <div className="flex gap-4 text-sm text-muted-foreground">
              <a href="#" className="hover:text-primary transition-colors">–£—Å–ª–æ–≤–∏—è</a>
              <a href="#" className="hover:text-primary transition-colors">–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</a>
              <a href="#" className="hover:text-primary transition-colors">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Index;